//
// Created by shanhai on 2020/4/17.
//

#include "../include/ziplist.h"
/**
 * ziplist，压缩链表是一种特殊二次编码的链表，借以实现高性能。它保存string和
 * integer两种值，其中integer按照integer而非character来编码（尽管redis中
 * 的key都是字符串）。它提供在链表两端的O(1)复杂度的压入和弹出操作。然而，因为
 * 每个操作需要额外分配内存，实际的复杂度和ziplist所使用的内存量相关。
 *
 * -----------------------------------------------------------------
 * 压缩链表的整体布局
 * <zlbytes><zltail><zllen><entry> ...<entry> ...  <entry><zlend>
 * <zlbytes>是一个unsigned integer，存放ziplist所占用的字节数量。这个值
 * 需要被保存，以能够在不遍历整体ziplist的前提下进行resize。
 *
 * <zltail>是到最后一个entry的偏移量。这样可以在不遍历整个链表的情况下，实现ziplist
 * 远端的pop操作。
 *
 * <zllen>是entry节点的数量。当这个值大于2**16-2时，我们需要遍历entry链表
 * 来知道它存放了多少东西。
 *
 * <zlend>是一个单字节的特殊值，等于255，专门用来表示链表的结束(一个字节最大可以
 * 表示 2**8 - 1 == 255)。
 * -----------------------------------------------------------------
 * ZIPLIST的ENTRIES：
 * 每个entry都被设置了一个含有两个重要信息的header前缀。首先，保存了前一个entry
 * 的长度，以实现从尾部向头部的遍历；其次，存储了可选字符串长度的编码方式。
 * -----------------------------------------------------------------
 *
 * 前个entry的长度按如下编码方式给出：
 * 如何长度小于254个字节，它将仅使用一个字节存放长度的值。
 * 如，前一个entry长度为100，则可用一个字节表示：0110 0100
 * ----------------------------
 * 当长度大于或等于254时，它将占用5个字节。第一个字节被设置为254用以声明后面将要
 * 跟随一个更大的值。剩余的4个字节用来保存前个entry长度的值。
 * 如，前一个entry长度为526(二进制形式有效位为：10   0000 1110)，则需要用5个字节表示：
 * 第一个字节：1111 1110
 * 后四个字节按照大端序，可存储一个int
 * 0000 1110       0000 0010       0000 0000       0000 0000
 *   ^^^                                              ^^^
 *  高地址                                             低地址
 *---------------------------------
 * 该entry自身头部其他区域取决于该entry的内容。当entry存储的是string，
 * 高2位存储（保存字符串长度的）编码类型；
 * 当entry是一个integer，高2bit被置为11。随后的2位被用来指定 后面将要
 * 存储哪种kind的integer。
 * String：
 * 00xx xxxx :这里的x可以取值0和1，因为 11 1111代表63，所以高2bit，一个byte用来表示<=63个字节长度的字符串。
 * 01xx xxxx|xxxx xxxx：高2bit 01 代表使用2个字节编码表示字符串的长度。而0011 1111|1111 1111等于16383,即高2bit用01，表示64到16383个字节长度的字符串
 * 10xx xxxx|xxxx xxxx|xxxx xxxx|xxxx xxxx|xxxx xxxx  ==== 5 bytes
 * 高2bit用10，表示字节长度大于16383的字符串。
 *
 *=============integer=================
 * 1100 0000        1 bytes
 *  integer型，后面2个bytes保存值
 * 1101 0000        1 bytes
 *  后面4个bytes保存值
 * 1110 0000        1byte
 * 后面8个字节保存值
 * 1111 0000        1byte
 * 后面3个字节保存有符号整数
 * 1111 1110        1byte
 * 后面1个byte保存有符号整数
 * 1111 xxxx        0byte
 * 保存从0到12的数字，范围从 |1111 0001|到|1111 1101|，（1到13）-1 来表示(0到12)
 *
 * 所有的整型都使用小端序来存放。
 *---------------------------------------------------------------
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
